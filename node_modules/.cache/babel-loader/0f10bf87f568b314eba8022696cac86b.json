{"ast":null,"code":"var _jsxFileName = \"D:\\\\My Files\\\\React\\\\01-starting-setup\\\\src\\\\components\\\\NewExpense\\\\ExpenseForm.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport './ExpenseForm.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ExpenseForm = props => {\n  _s();\n\n  // using multiple states method (most prefered method is this)\n  const [enteredTitle, setEnteredTitle] = useState(\"\");\n  const [enteredAmount, setEnteredAmount] = useState(\"\");\n  const [enteredDate, setEnteredDate] = useState(\"\");\n  const [showForm, setShowForm] = useState(false);\n\n  const titleChangeHandler = event => {\n    setEnteredTitle(event.target.value);\n    console.log(enteredTitle);\n  };\n\n  const amountChangeHandler = event => {\n    setEnteredAmount(event.target.value);\n  };\n\n  const dateChangeHandler = event => {\n    setEnteredDate(event.target.value);\n  }; // second method\n  // using single useState\n  // const [userInputs, setUSerInputs] = useState({\n  //     enteredTitle: '',\n  //     enteredAmount: '',\n  //     enteredDate: '',\n  // })\n  // const titleChangeHandler = (event) => {\n  //     // setUSerInputs({\n  //     //     // this will may not work properly sometimes\n  //     //     // since state scheduler \n  //     //     //therefore we may used outdated state values\n  //     //     ...userInputs,\n  //     //     enteredTitle: event.target.value\n  //     // })\n  //     // since above way may produce wrong output \n  //     // keep in mind use this method if using single state \n  //     // this way will used the prevState only when creating new state\n  //     setUSerInputs((prevState) => {\n  //         return ({\n  //             ...prevState,\n  //             enteredTitle: event.target.value\n  //         })\n  //     })\n  //     console.log(userInputs)\n  // }\n\n\n  const submitHandler = event => {\n    event.preventDefault();\n    const expenseData = {\n      title: enteredTitle,\n      amount: enteredAmount,\n      date: new Date(enteredDate)\n    };\n    props.onSaveExpenseData(expenseData);\n    setEnteredAmount(\"\");\n    setEnteredDate(\"\");\n    setEnteredTitle(\"\");\n  };\n\n  const onClicKHandler = () => {\n    setShowForm(true);\n  };\n\n  if (!showForm) {\n    return /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: onClicKHandler,\n      children: \"Add New Expense\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 16\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: submitHandler,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"new-expense__controls\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"new-expense__control\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Title\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: enteredTitle,\n            onChange: titleChangeHandler\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"new-expense__control\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Amount\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            value: enteredAmount,\n            min: \"0.01\",\n            step: \"0.01\",\n            onChange: amountChangeHandler\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"new-expense__control\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Date\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"date\",\n            value: enteredDate,\n            min: \"2019-01-01\",\n            max: \"2022-12-31\",\n            onChange: dateChangeHandler\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"new-expense__actions\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          children: \"Add Expense\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"new-expense__actions\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          children: \"Add Expense\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 9\n  }, this);\n};\n\n_s(ExpenseForm, \"16f/iCgx8Wd3wUEGu4AbWcicUZc=\");\n\n_c = ExpenseForm;\nexport default ExpenseForm;\n/* Best way to do with singale state and single handler\r\n   without the two way binding as well*/\n// function Form() {\n//     const [userInput, setUserInput] = useState({mail: '', password: ''})\n//     const handleUserInput = (e) => {\n//       setUserInput((prevState)=> (\n//         {...prevState, \n//         [e.target.name]: e.target.value}\n//       ))\n//     }\n//     return (\n//         <form>\n//           <input value={userInput.mail} name='mail' onChange={handleUserInput}/>\n//           <input value={userInput.password} name='password' onChange={handleUserInput}/>\n//         </form>\n//     );\n//   }\n\nvar _c;\n\n$RefreshReg$(_c, \"ExpenseForm\");","map":{"version":3,"sources":["D:/My Files/React/01-starting-setup/src/components/NewExpense/ExpenseForm.js"],"names":["React","useState","ExpenseForm","props","enteredTitle","setEnteredTitle","enteredAmount","setEnteredAmount","enteredDate","setEnteredDate","showForm","setShowForm","titleChangeHandler","event","target","value","console","log","amountChangeHandler","dateChangeHandler","submitHandler","preventDefault","expenseData","title","amount","date","Date","onSaveExpenseData","onClicKHandler"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\r\nimport './ExpenseForm.css'\r\n\r\nconst ExpenseForm = (props) => {\r\n\r\n    // using multiple states method (most prefered method is this)\r\n    const [enteredTitle, setEnteredTitle] = useState(\"\")\r\n    const [enteredAmount, setEnteredAmount] = useState(\"\")\r\n    const [enteredDate, setEnteredDate] = useState(\"\")\r\n    const [showForm, setShowForm] = useState(false)\r\n\r\n    const titleChangeHandler = (event) => {\r\n        setEnteredTitle(event.target.value)\r\n        console.log(enteredTitle)\r\n    }\r\n\r\n    const amountChangeHandler = (event) => {\r\n        setEnteredAmount(event.target.value)\r\n    }\r\n\r\n    const dateChangeHandler = (event) => {\r\n        setEnteredDate(event.target.value)\r\n    }\r\n\r\n    // second method\r\n    // using single useState\r\n    // const [userInputs, setUSerInputs] = useState({\r\n    //     enteredTitle: '',\r\n    //     enteredAmount: '',\r\n    //     enteredDate: '',\r\n    // })\r\n\r\n    // const titleChangeHandler = (event) => {\r\n\r\n    //     // setUSerInputs({\r\n    //     //     // this will may not work properly sometimes\r\n    //     //     // since state scheduler \r\n    //     //     //therefore we may used outdated state values\r\n    //     //     ...userInputs,\r\n    //     //     enteredTitle: event.target.value\r\n    //     // })\r\n\r\n    //     // since above way may produce wrong output \r\n    //     // keep in mind use this method if using single state \r\n    //     // this way will used the prevState only when creating new state\r\n    //     setUSerInputs((prevState) => {\r\n    //         return ({\r\n    //             ...prevState,\r\n    //             enteredTitle: event.target.value\r\n    //         })\r\n    //     })\r\n\r\n    //     console.log(userInputs)\r\n    // }\r\n\r\n    const submitHandler = (event) => {\r\n        event.preventDefault();     \r\n        const expenseData = {\r\n            title: enteredTitle,\r\n            amount: enteredAmount,\r\n            date: new Date(enteredDate) \r\n        }\r\n        \r\n        props.onSaveExpenseData(expenseData);\r\n\r\n        setEnteredAmount(\"\")\r\n        setEnteredDate(\"\")\r\n        setEnteredTitle(\"\")\r\n\r\n        \r\n    }\r\n\r\n    const onClicKHandler = () => {\r\n        setShowForm(true);\r\n    }\r\n\r\n    if(!showForm){\r\n        return <button onClick={onClicKHandler}>Add New Expense</button>\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <form onSubmit={submitHandler}>\r\n                <div className='new-expense__controls'>\r\n                    <div className='new-expense__control'>\r\n                        <label>Title</label>\r\n                        <input type='text' value={enteredTitle} onChange={titleChangeHandler} />\r\n                    </div>\r\n                    <div className='new-expense__control'>\r\n                        <label>Amount</label>\r\n                        <input type='number' value={enteredAmount} min='0.01' step='0.01' onChange={amountChangeHandler} />\r\n                    </div>\r\n                    <div className='new-expense__control'>\r\n                        <label>Date</label>\r\n                        <input type='date'value={enteredDate}  min='2019-01-01' max='2022-12-31' onChange={dateChangeHandler} />\r\n                    </div>\r\n                </div>\r\n                <div className='new-expense__actions'>\r\n                    <button type='submit'>Add Expense</button>\r\n                </div>\r\n                <div className='new-expense__actions'>\r\n                    <button type='submit'>Add Expense</button>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ExpenseForm;\r\n\r\n/* Best way to do with singale state and single handler\r\n   without the two way binding as well*/\r\n\r\n// function Form() {\r\n//     const [userInput, setUserInput] = useState({mail: '', password: ''})\r\n//     const handleUserInput = (e) => {\r\n//       setUserInput((prevState)=> (\r\n//         {...prevState, \r\n//         [e.target.name]: e.target.value}\r\n//       ))\r\n//     }\r\n//     return (\r\n//         <form>\r\n//           <input value={userInput.mail} name='mail' onChange={handleUserInput}/>\r\n//           <input value={userInput.password} name='password' onChange={handleUserInput}/>\r\n//         </form>\r\n//     );\r\n//   }"]},"metadata":{},"sourceType":"module"}