{"ast":null,"code":"var _jsxFileName = \"D:\\\\My Files\\\\React\\\\01-starting-setup\\\\src\\\\components\\\\NewExpense\\\\ExpenseForm.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport './ExpenseForm.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ExpenseForm = () => {\n  _s();\n\n  // using multiple states method (most prefered method is this)\n  // const [enteredTitle, setEnteredTitle] = useState(\"\")\n  // const [enteredAmount, setEnteredAmount] = useState(\"\")\n  // const [enteredDate, setEnteredDate] = useState(\"\")\n  // const titleChangeHandler = (event) => {\n  //     setEnteredTitle(event.target.value)\n  //     console.log(enteredTitle)\n  // }\n  // const amountChangeHandler = (event) => {\n  //     setEnteredAmount(event.target.value)\n  // }\n  // const dateChangeHandler = (event) => {\n  //     setEnteredDate(event.target.value)\n  // }\n  // second method\n  // using single useState\n  const [userInputs, setUSerInputs] = useState({\n    enteredTitle: '',\n    enteredAmount: '',\n    enteredDate: ''\n  });\n\n  const titleChangeHandler = event => {\n    setUSerInputs({ // this will may not work properly somtimes\n      // since state scheduler \n      //therefore we will may used outdated state values\n      ...userInputs,\n      enteredTitle: event.target.value\n    });\n  };\n\n  const amountChangeHandler = event => {\n    setEnteredAmount(event.target.value);\n  };\n\n  const dateChangeHandler = event => {\n    setEnteredDate(event.target.value);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"new-expense__controls\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"new-expense__control\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Title\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            onChange: titleChangeHandler\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"new-expense__control\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Amount\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            min: \"0.01\",\n            step: \"0.01\",\n            onChange: amountChangeHandler\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"new-expense__control\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Date\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"date\",\n            min: \"2019-01-01\",\n            max: \"2022-12-31\",\n            onChange: dateChangeHandler\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"new-expense__actions\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          children: \"Add Expense\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 9\n  }, this);\n};\n\n_s(ExpenseForm, \"+jh8HVQ7TjNqLQdgMDzr6PeB2Pk=\");\n\n_c = ExpenseForm;\nexport default ExpenseForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"ExpenseForm\");","map":{"version":3,"sources":["D:/My Files/React/01-starting-setup/src/components/NewExpense/ExpenseForm.js"],"names":["React","useState","ExpenseForm","userInputs","setUSerInputs","enteredTitle","enteredAmount","enteredDate","titleChangeHandler","event","target","value","amountChangeHandler","setEnteredAmount","dateChangeHandler","setEnteredDate"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAO,mBAAP;;;AAEA,MAAMC,WAAW,GAAG,MAAM;AAAA;;AAEtB;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BH,QAAQ,CAAC;AACzCI,IAAAA,YAAY,EAAE,EAD2B;AAEzCC,IAAAA,aAAa,EAAE,EAF0B;AAGzCC,IAAAA,WAAW,EAAE;AAH4B,GAAD,CAA5C;;AAMA,QAAMC,kBAAkB,GAAIC,KAAD,IAAW;AAElCL,IAAAA,aAAa,CAAC,EACV;AACA;AACA;AACA,SAAGD,UAJO;AAKVE,MAAAA,YAAY,EAAEI,KAAK,CAACC,MAAN,CAAaC;AALjB,KAAD,CAAb;AAOH,GATD;;AAWA,QAAMC,mBAAmB,GAAIH,KAAD,IAAW;AACnCI,IAAAA,gBAAgB,CAACJ,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAhB;AACH,GAFD;;AAIA,QAAMG,iBAAiB,GAAIL,KAAD,IAAW;AACjCM,IAAAA,cAAc,CAACN,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAd;AACH,GAFD;;AAIA,sBACI;AAAA,2BACI;AAAA,8BACI;AAAK,QAAA,SAAS,EAAC,uBAAf;AAAA,gCACI;AAAK,UAAA,SAAS,EAAC,sBAAf;AAAA,kCACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADJ,eAEI;AAAO,YAAA,IAAI,EAAC,MAAZ;AAAmB,YAAA,QAAQ,EAAEH;AAA7B;AAAA;AAAA;AAAA;AAAA,kBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,eAKI;AAAK,UAAA,SAAS,EAAC,sBAAf;AAAA,kCACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADJ,eAEI;AAAO,YAAA,IAAI,EAAC,QAAZ;AAAqB,YAAA,GAAG,EAAC,MAAzB;AAAgC,YAAA,IAAI,EAAC,MAArC;AAA4C,YAAA,QAAQ,EAAEI;AAAtD;AAAA;AAAA;AAAA;AAAA,kBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,gBALJ,eASI;AAAK,UAAA,SAAS,EAAC,sBAAf;AAAA,kCACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADJ,eAEI;AAAO,YAAA,IAAI,EAAC,MAAZ;AAAmB,YAAA,GAAG,EAAC,YAAvB;AAAoC,YAAA,GAAG,EAAC,YAAxC;AAAqD,YAAA,QAAQ,EAAEE;AAA/D;AAAA;AAAA;AAAA;AAAA,kBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,gBATJ;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAeI;AAAK,QAAA,SAAS,EAAC,sBAAf;AAAA,+BACI;AAAQ,UAAA,IAAI,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cAfJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAuBH,CAvED;;GAAMZ,W;;KAAAA,W;AAyEN,eAAeA,WAAf","sourcesContent":["import React, { useState } from 'react'\r\nimport './ExpenseForm.css'\r\n\r\nconst ExpenseForm = () => {\r\n\r\n    // using multiple states method (most prefered method is this)\r\n    // const [enteredTitle, setEnteredTitle] = useState(\"\")\r\n    // const [enteredAmount, setEnteredAmount] = useState(\"\")\r\n    // const [enteredDate, setEnteredDate] = useState(\"\")\r\n\r\n    // const titleChangeHandler = (event) => {\r\n    //     setEnteredTitle(event.target.value)\r\n    //     console.log(enteredTitle)\r\n    // }\r\n\r\n    // const amountChangeHandler = (event) => {\r\n    //     setEnteredAmount(event.target.value)\r\n    // }\r\n\r\n    // const dateChangeHandler = (event) => {\r\n    //     setEnteredDate(event.target.value)\r\n    // }\r\n\r\n    // second method\r\n    // using single useState\r\n\r\n    const [userInputs, setUSerInputs] = useState({\r\n        enteredTitle: '',\r\n        enteredAmount: '',\r\n        enteredDate: '',\r\n    })\r\n\r\n    const titleChangeHandler = (event) => {\r\n\r\n        setUSerInputs({\r\n            // this will may not work properly somtimes\r\n            // since state scheduler \r\n            //therefore we will may used outdated state values\r\n            ...userInputs,\r\n            enteredTitle: event.target.value\r\n        })\r\n    }\r\n\r\n    const amountChangeHandler = (event) => {\r\n        setEnteredAmount(event.target.value)\r\n    }\r\n\r\n    const dateChangeHandler = (event) => {\r\n        setEnteredDate(event.target.value)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <form>\r\n                <div className='new-expense__controls'>\r\n                    <div className='new-expense__control'>\r\n                        <label>Title</label>\r\n                        <input type='text' onChange={titleChangeHandler} />\r\n                    </div>\r\n                    <div className='new-expense__control'>\r\n                        <label>Amount</label>\r\n                        <input type='number' min='0.01' step='0.01' onChange={amountChangeHandler} />\r\n                    </div>\r\n                    <div className='new-expense__control'>\r\n                        <label>Date</label>\r\n                        <input type='date' min='2019-01-01' max='2022-12-31' onChange={dateChangeHandler} />\r\n                    </div>\r\n                </div>\r\n                <div className='new-expense__actions'>\r\n                    <button type='submit'>Add Expense</button>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ExpenseForm;"]},"metadata":{},"sourceType":"module"}